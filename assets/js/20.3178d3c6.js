(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{415:function(_,v,t){_.exports=t.p+"assets/img/MCP-Arth.179d15dc.jpg"},416:function(_,v,t){_.exports=t.p+"assets/img/Host-Client-Server.a111c80e.png"},503:function(_,v,t){"use strict";t.r(v);var e=t(8),r=Object(e.a)({},(function(){var _=this,v=_._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[v("p",[v("a",{attrs:{href:"/html/mcp_learning.html",target:"_blank"}},[_._v("MCP 学习计划")])]),_._v(" "),v("h2",{attrs:{id:"一-概念及架构原理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#一-概念及架构原理"}},[_._v("#")]),_._v(" 一. 概念及架构原理")]),_._v(" "),v("h3",{attrs:{id:"_1-核心概念"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-核心概念"}},[_._v("#")]),_._v(" 1.核心概念")]),_._v(" "),v("p",[_._v("MCP（Model Context Protocol，模型上下文协议）是一种由 Anthropic 公司推出的一个开放标准协议，目的就是为了解决 AI 模型与外部数据源、工具交互的难题。")]),_._v(" "),v("p",[_._v("它就像是一个 “通用插头” 或者 “USB 接口”，制定了统一的规范，不管是连接数据库、第三方 API，还是本地文件等各种外部资源，都可以通过这个 “通用接口” 来完成，让 AI 模型与外部工具或数据源之间的交互更加标准化、可复用。")]),_._v(" "),v("p",[v("img",{attrs:{src:t(415),alt:"MCP-Arth.jpg"}})]),_._v(" "),v("h3",{attrs:{id:"_2-架构原理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-架构原理"}},[_._v("#")]),_._v(" 2.架构原理")]),_._v(" "),v("p",[_._v("MCP 的架构原理非常简单，它将 AI 模型与外部数据源、工具或文件进行交互，通过一个通用的接口，实现数据交换。\n具体来说，MCP 的工作流程如下：")]),_._v(" "),v("ol",[v("li",[_._v("AI 模型通过 MCP 接口发送请求，请求需要的数据或功能。")]),_._v(" "),v("li",[_._v("MCP 接收到请求后，会根据请求的类型，调用相应的外部数据源、工具或文件，获取所需的数据。")]),_._v(" "),v("li",[_._v("外部数据源、工具或文件返回数据后，MCP 会将数据返回给 AI 模型。")]),_._v(" "),v("li",[_._v("AI 模型接收到数据后，就可以使用这些数据进行后续的计算或处理。")])]),_._v(" "),v("p",[v("img",{attrs:{src:t(416),alt:"Host-Client-Server.png"}})]),_._v(" "),v("p",[v("strong",[_._v("MCP Server")]),_._v(":")]),_._v(" "),v("p",[_._v("负责接收 MCP 请求，并调用外部数据源、工具或文件，返回数据。每一个"),v("code",[_._v("Server")]),_._v("专注于一个特定的数据源或工具集，比如文件系统、数据库、API服务等。\n"),v("code",[_._v("Server")]),_._v("实现了 一个"),v("code",[_._v("Server")]),_._v("接口，定义了如何接收 MCP 请求，如何调用外部数据源、工具或文件，如何返回数据。")]),_._v(" "),v("ol",[v("li",[_._v("实现协议层：处理MCP通信协议、消息格式、连接管理等")]),_._v(" "),v("li",[_._v("暴露Resources：提供可访问的数据资源（如文件、数据库记录）")]),_._v(" "),v("li",[_._v("暴露Tools：提供可调用的功能接口")]),_._v(" "),v("li",[_._v("暴露Prompts：提供可重用的提示模板")]),_._v(" "),v("li",[_._v("权限和安全控制：管理访问权限、验证请求等")])]),_._v(" "),v("p",[v("strong",[_._v("MCP Client")]),_._v(":")]),_._v(" "),v("p",[_._v("负责向 MCP Server发送请求，并接收返回的数据。Claude这样的"),v("code",[_._v("AI Agent")]),_._v("就是典型的MCP Client，它可以通过MCP协议与多个"),v("code",[_._v("MCP Server")]),_._v("通信。")]),_._v(" "),v("p",[v("strong",[_._v("MCP Host")]),_._v(":")]),_._v(" "),v("p",[_._v("负责管理 MCP Server和 Client，提供统一的接口，让 AI 模型可以方便地使用外部数据源、工具或文件。")]),_._v(" "),v("p",[v("strong",[_._v("AI Agent")]),_._v(":")]),_._v(" "),v("p",[_._v("充当"),v("code",[_._v("MCP Client")]),_._v("的角色。通过MCP协议与外部服务器通信。"),v("code",[_._v("LLM")]),_._v("负责理解用户意图和生成响应，而MCP让"),v("code",[_._v("AI Agent")]),_._v("能够获取实时数据和执行外部操作，两者结合才构成了完整的智能助手体验。")]),_._v(" "),v("p",[_._v("核心特征:")]),_._v(" "),v("ul",[v("li",[_._v("多模态输入处理能力\n"),v("ul",[v("li",[_._v("文本、图片、音频等多种输入格式")]),_._v(" "),v("li",[_._v("复杂的预处理和格式转换逻辑")])])]),_._v(" "),v("li",[_._v("会话管理能力\n"),v("ul",[v("li",[_._v("多轮对话支持")]),_._v(" "),v("li",[_._v("本地存储会话历史")]),_._v(" "),v("li",[_._v("上下文连续性维护")])])]),_._v(" "),v("li",[_._v("完整的"),v("code",[_._v("MCP Client")]),_._v("实现\n"),v("ul",[v("li",[_._v("协议转换和通信管理")]),_._v(" "),v("li",[_._v("与LLM的标准化交互")])])])]),_._v(" "),v("h3",{attrs:{id:"_3-主要组件"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-主要组件"}},[_._v("#")]),_._v(" 3.主要组件")]),_._v(" "),v("p",[_._v("MCP协议包含三个核心抽象：")]),_._v(" "),v("ol",[v("li",[v("code",[_._v("Resources")]),_._v(": 表示外部数据源，如文件、数据库记录、API响应等。")]),_._v(" "),v("li",[v("code",[_._v("Tools")]),_._v(": Server 暴露可执行功能（MCP Server对外提供的功能接口），供 LLM 调用以与外部系统交互。，如"),v("code",[_._v("read_file")]),_._v("、"),v("code",[_._v("write_file")]),_._v("等。")]),_._v(" "),v("li",[v("code",[_._v("Prompts")]),_._v(": Server 定义可复用的提示模板，引导 LLM 交互。")]),_._v(" "),v("li",[v("code",[_._v("Sampling")]),_._v("：让 Server 借助 Client 向 LLM 发起完成请求，实现复杂的智能行为。")])]),_._v(" "),v("h3",{attrs:{id:"_4-通信协议"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4-通信协议"}},[_._v("#")]),_._v(" 4.通信协议")]),_._v(" "),v("p",[_._v("MCP 的底层通信机制是 "),v("a",{attrs:{href:"https://www.jsonrpc.org/specification",target:"_blank"}},[_._v("JSON-RPC 2.0")]),_._v("。\nJSON-RPC 2.0 是一种轻量级的远程过程调用（RPC）协议，使用 JSON 格式进行数据交换，常用于前后端或服务间通信。")]),_._v(" "),v("ul",[v("li",[v("strong",[_._v("Hosts")]),_._v(": 发起连接的大型语言模型（LLM）应用程序")]),_._v(" "),v("li",[v("strong",[_._v("Clients")]),_._v(": 位于Hosts内部的连接器")]),_._v(" "),v("li",[v("strong",[_._v("Servers")]),_._v(": 提供上下文信息和功能的服务")])]),_._v(" "),v("h3",{attrs:{id:"_5-主流实现"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_5-主流实现"}},[_._v("#")]),_._v(" 5.主流实现")]),_._v(" "),v("ul",[v("li",[v("a",{attrs:{href:"https://github.com/modelcontextprotocol/servers",target:"_blank"}},[_._v("官方MCP Server实现")])]),_._v(" "),v("li",[v("a",{attrs:{href:"https://mcp.so",target:"_blank"}},[_._v("MCP Server 聚合平台")])]),_._v(" "),v("li",[v("a",{attrs:{href:"https://mcpmarket.cn",target:"_blank"}},[_._v("MCP Market")])]),_._v(" "),v("li",[v("a",{attrs:{href:"https://smithery.ai",target:"_blank"}},[_._v("Smithery 聚合")])])]),_._v(" "),v("h2",{attrs:{id:"五-参考资料"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#五-参考资料"}},[_._v("#")]),_._v(" 五. 参考资料")]),_._v(" "),v("ul",[v("li",[_._v("https://zhuanlan.zhihu.com/p/1892565780807255460")])])])}),[],!1,null,null,null);v.default=r.exports}}]);